#!/usr/bin/env php
<?php
/*
 * This file is part of wulacms.
 *
 * (c) Leo Ning <windywany@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace wulaphp\bin;

define('SDIR', __DIR__ . DIRECTORY_SEPARATOR . '_' . DIRECTORY_SEPARATOR);

if (isset($argv[1]) && $argv[1]) {
    switch ($argv[1]) {
        case 'upgrade':
            upgrade();
            break;
        case 'init':
            init();
            break;
        case 'conf':
        case 'config':
            conf();
            break;
        default:
            wulaHint();
            exit(1);
    }
} else {
    wulaHint();
}
/**
 * @internal
 */
function init() {
    $dir = getDestDir();
    if (is_file($dir . 'bootstrap.php')) {
        echo "'bootstrap.php' found, skip init process!\n";
        exit(1);
    }
    _copy(SDIR, $dir);
    @chmod($dir . 'artisan', 0777);
    @chmod($dir . 'storage', 0777);
    @chmod($dir . 'storage/logs', 0777);
    @chmod($dir . 'storage/tmp', 0777);
    @rename($dir . '_tests', $dir . 'tests');
    echo "done!\n";
}

/**
 * @param $dir
 * @param $ddir
 *
 * @internal
 */
function _copy($dir, $ddir) {
    $h = opendir($dir);
    if ($h) {
        while (($f = readdir($h))) {
            if ($f == '.' || $f == '..') {
                continue;
            }
            if (is_dir($dir . $f)) {
                if (!is_dir($ddir . $f)) {
                    mkdir($ddir . $f, 0755);
                }
                _copy($dir . $f . DIRECTORY_SEPARATOR, $ddir . $f . DIRECTORY_SEPARATOR);
            } else {
                copy($dir . $f, $ddir . $f);
            }
        }
        closedir($h);
    }
}

/**
 * @internal
 */
function upgrade() {
    $file = getDestDir() . 'artisan';
    if (@copy(SDIR . 'artisan', $file)) {
        @chmod($file, 0777);
        echo "'atrtisan' tool upgraded!\n";
    } else {
        echo "can not upgrade 'atrtisan' tool!\n";
        exit(1);
    }
    $file = getDestDir() . 'docker-compose.sample.yml';
    @copy(SDIR . 'docker-compose.sample.yml', $file);
}

/**
 * @internal
 */
function conf() {
    global $argv, $argc;
    $domains = [];
    if (isset($argv[2]) && $argv[2]) {
        if (!in_array($argv[2], ['httpd', 'apache', 'nginx'])) {
            for ($i = 2; $i < $argc; $i ++) {
                $domains[] = $argv[ $i ];
            }
        } else {
            for ($i = 3; $i < $argc; $i ++) {
                $domains[] = $argv[ $i ];
            }
        }
        $type = $argv[2];
    } else {
        $type = 'nginx';
    }

    $dir = dirname(__DIR__, 4) . DIRECTORY_SEPARATOR;
    if (DIRECTORY_SEPARATOR != '/') {
        $dir = str_replace(DIRECTORY_SEPARATOR, '/', $dir);
    }
    if ($type == 'apache' || $type == 'httpd') {
        if ($domains) {
            $domain = 'ServerName ' . implode("\n    ServerName ", $domains);
        } else {
            $domain = 'ServerName your_server_name';
        }
        $type = 'apache';
    } else {
        if ($domains) {
            $domain = 'server_name  ' . implode(' ', $domains) . ';';
        } else {
            $domain = 'server_name  your_server_name;';
        }
    }

    $apache = <<<ETC
<VirtualHost *:80>
    DocumentRoot "{$dir}wwwroot"
    $domain
    #CustomLog "access_log" common
    #ErrorLog "error_log" 
    
    <Directory "{$dir}">
        Options FollowSymLinks
        AllowOverride All 
        Require all granted
    </Directory>
    
    <LocationMatch "^/(?<DIR>modules|themes)/(?<FILE>.+\.(js|css|jpe?g|png|gif|eot|svg|ttf|woff2?))$">
        <IfModule alias_module>
            Alias "{$dir}%{env:MATCH_DIR}/%{env:MATCH_FILE}"
        </IfModule>
        <IfModule deflate_module>
            AddOutputFilterByType DEFLATE text/css text/javascript application/javascript
        </IfModule>
        <IfModule expires_module>
            ExpiresActive Off
            ExpiresDefault "access plus 30 days"
        </IfModule>
    </LocationMatch>
    
    # other directives can be here
</VirtualHost>
ETC;

    $nginx = <<< ETC
server {
    listen       80;
    #listen      443 ssl;
    $domain
    
    #access_log  off;
    #error_log   off;
    
    root {$dir}wwwroot;
    
    location / {
        index index.php index.html index.htm;
        if (!-e \$request_filename){
            rewrite ^(.*)$ index.php last;
        }
    }
    
    location ~ ^/(assets|files)/.+\.(php[s345]?|tpl|inc)$ {        
        return 404;
    }
    
    location ~ ^/(modules|themes)/.+\.(js|css|png|gif|jpe?g|eot|svg|ttf|woff2?)$ {
        root {$dir};
        
        gzip on;
        gzip_min_length 1000;
        gzip_comp_level 7;
        gzip_types text/css application/x-javascript application/javascript text/javascript;
        #expires 30d;
    }
    
    location ~ \.php$ {
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  \$document_root/\$fastcgi_script_name;
        #fastcgi_param  APPMODE pro;
        include        fastcgi_params;
    }
    
    location ~ /\.ht {
        deny  all;
    }
}
ETC;

    if ($type == 'apache') {
        echo $apache, "\n";
    } else {
        echo $nginx, "\n";
    }
}

/**
 * @internal
 */
function getDestDir() {
    global $argv;
    if (isset($argv[1])) {
        $dir = untrailingslashit($argv[1]) . DIRECTORY_SEPARATOR;
    } else {
        $dir = dirname(__DIR__, 4) . DIRECTORY_SEPARATOR;
    }

    return $dir;
}

/**
 * @internal
 */
function wulaHint() {
    echo 'wulaphp 3.0 by Leo Ning and contributors.', "\n\n";
    echo 'Usage: wulaphp <init|upgrade>', "\n";
    echo '       wulaphp conf [nginx|apache] [domain1 domain2 ...]', "\n\n";
    echo "Commands:\n";
    echo "       init                 init a wulaphp project\n";
    echo "       upgrade              upgrade artisan tool\n";
    echo "       conf [nginx|apache]  show configuration for nginx or apache\n";
}
// end of wulaphp